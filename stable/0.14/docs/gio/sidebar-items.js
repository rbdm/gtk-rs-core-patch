initSidebarItems({"constant":[["NONE_ACTION",""],["NONE_ACTION_GROUP",""],["NONE_ACTION_MAP",""],["NONE_APPLICATION",""],["NONE_APPLICATION_COMMAND_LINE",""],["NONE_APP_INFO",""],["NONE_APP_LAUNCH_CONTEXT",""],["NONE_ASYNC_RESULT",""],["NONE_BUFFERED_INPUT_STREAM",""],["NONE_BUFFERED_OUTPUT_STREAM",""],["NONE_CANCELLABLE",""],["NONE_CONVERTER",""],["NONE_CONVERTER_INPUT_STREAM",""],["NONE_CONVERTER_OUTPUT_STREAM",""],["NONE_DATA_INPUT_STREAM",""],["NONE_DATA_OUTPUT_STREAM",""],["NONE_DBUS_INTERFACE",""],["NONE_DBUS_INTERFACE_SKELETON",""],["NONE_DBUS_OBJECT",""],["NONE_DBUS_PROXY",""],["NONE_DRIVE",""],["NONE_EMBLEMED_ICON",""],["NONE_FILE",""],["NONE_FILE_ENUMERATOR",""],["NONE_FILE_INPUT_STREAM",""],["NONE_FILE_IO_STREAM",""],["NONE_FILE_MONITOR",""],["NONE_FILE_OUTPUT_STREAM",""],["NONE_FILTER_INPUT_STREAM",""],["NONE_FILTER_OUTPUT_STREAM",""],["NONE_ICON",""],["NONE_INET_ADDRESS",""],["NONE_INET_ADDRESS_MASK",""],["NONE_INET_SOCKET_ADDRESS",""],["NONE_INPUT_STREAM",""],["NONE_IO_STREAM",""],["NONE_LIST_MODEL",""],["NONE_LOADABLE_ICON",""],["NONE_MEMORY_INPUT_STREAM",""],["NONE_MEMORY_MONITOR",""],["NONE_MEMORY_OUTPUT_STREAM",""],["NONE_MENU_ATTRIBUTE_ITER",""],["NONE_MENU_LINK_ITER",""],["NONE_MENU_MODEL",""],["NONE_MOUNT",""],["NONE_MOUNT_OPERATION",""],["NONE_NETWORK_ADDRESS",""],["NONE_NETWORK_MONITOR",""],["NONE_NETWORK_SERVICE",""],["NONE_OUTPUT_STREAM",""],["NONE_PERMISSION",""],["NONE_POLLABLE_INPUT_STREAM",""],["NONE_POLLABLE_OUTPUT_STREAM",""],["NONE_PROXY",""],["NONE_PROXY_ADDRESS",""],["NONE_PROXY_RESOLVER",""],["NONE_REMOTE_ACTION_GROUP",""],["NONE_RESOLVER",""],["NONE_SEEKABLE",""],["NONE_SETTINGS",""],["NONE_SETTINGS_BACKEND",""],["NONE_SIMPLE_ACTION_GROUP",""],["NONE_SOCKET",""],["NONE_SOCKET_ADDRESS",""],["NONE_SOCKET_ADDRESS_ENUMERATOR",""],["NONE_SOCKET_CLIENT",""],["NONE_SOCKET_CONNECTABLE",""],["NONE_SOCKET_CONNECTION",""],["NONE_SOCKET_LISTENER",""],["NONE_SOCKET_SERVICE",""],["NONE_TCP_CONNECTION",""],["NONE_THREADED_SOCKET_SERVICE",""],["NONE_TLS_BACKEND",""],["NONE_TLS_CERTIFICATE",""],["NONE_TLS_CLIENT_CONNECTION",""],["NONE_TLS_CONNECTION",""],["NONE_TLS_DATABASE",""],["NONE_TLS_FILE_DATABASE",""],["NONE_TLS_INTERACTION",""],["NONE_TLS_PASSWORD",""],["NONE_TLS_SERVER_CONNECTION",""],["NONE_UNIX_FD_LIST",""],["NONE_UNIX_INPUT_STREAM",""],["NONE_UNIX_OUTPUT_STREAM",""],["NONE_UNIX_SOCKET_ADDRESS",""],["NONE_VFS",""],["NONE_VOLUME",""],["NONE_VOLUME_MONITOR",""]],"enum":[["BusType","An enumeration for well-known message buses."],["ConverterResult","Results returned from [`ConverterExtManual::convert()`][crate::prelude::ConverterExtManual::convert()]."],["CredentialsType","Enumeration describing different kinds of native credential types."],["DBusMessageByteOrder","Enumeration used to describe the byte order of a D-Bus message."],["DBusMessageHeaderField","Header fields used in [`DBusMessage`][crate::DBusMessage]."],["DBusMessageType","Message types used in [`DBusMessage`][crate::DBusMessage]."],["DataStreamByteOrder","[`DataStreamByteOrder`][crate::DataStreamByteOrder] is used to ensure proper endianness of streaming data sources across various machine architectures."],["DataStreamNewlineType","[`DataStreamNewlineType`][crate::DataStreamNewlineType] is used when checking for or setting the line endings for a given file."],["DriveStartStopType","Enumeration describing how a drive can be started/stopped."],["EmblemOrigin","GEmblemOrigin is used to add information about the origin of the emblem to [`Emblem`][crate::Emblem]."],["FileAttributeStatus","Used by [`FileExt::set_attributes_from_info()`][crate::prelude::FileExt::set_attributes_from_info()] when setting file attributes."],["FileAttributeType","The data types for file attributes."],["FileMonitorEvent","Specifies what type of event a monitor event is."],["FileType","Indicates the file’s on-disk type."],["IOErrorEnum","Error codes returned by GIO functions."],["InetAddressBytes",""],["MemoryMonitorWarningLevel","Memory availability warning levels."],["MountOperationResult","[`MountOperationResult`][crate::MountOperationResult] is returned as a result when a request for information is send by the mounting operation."],["NetworkConnectivity","The host’s network connectivity state, as reported by [`NetworkMonitor`][crate::NetworkMonitor]."],["NotificationPriority","Priority levels for `GNotifications`."],["PasswordSave","[`PasswordSave`][crate::PasswordSave] is used to indicate the lifespan of a saved password."],["ResolverRecordType","The type of record that [`ResolverExt::lookup_records()`][crate::prelude::ResolverExt::lookup_records()] or [`ResolverExt::lookup_records_async()`][crate::prelude::ResolverExt::lookup_records_async()] should retrieve. The records are returned as lists of [`glib::Variant`][crate::glib::Variant] tuples. Each record type has different values in the variant tuples returned."],["ResourceError","An error code used with `G_RESOURCE_ERROR` in a [`glib::Error`][crate::glib::Error] returned from a [`Resource`][crate::Resource] routine."],["SocketClientEvent","Describes an event occurring on a [`SocketClient`][crate::SocketClient]. See the `signal::SocketClient::event` signal for more details."],["SocketFamily","The protocol family of a [`SocketAddress`][crate::SocketAddress]. (These values are identical to the system defines `AF_INET`, `AF_INET6` and `AF_UNIX`, if available.)"],["SocketListenerEvent","Describes an event occurring on a [`SocketListener`][crate::SocketListener]. See the `signal::SocketListener::event` signal for more details."],["SocketProtocol","A protocol identifier is specified when creating a [`Socket`][crate::Socket], which is a family/type specific identifier, where 0 means the default protocol for the particular family/type."],["SocketType","Flags used when creating a [`Socket`][crate::Socket]. Some protocols may not implement all the socket types."],["TlsAuthenticationMode","The client authentication mode for a [`TlsServerConnection`][crate::TlsServerConnection]."],["TlsCertificateRequestFlags","Flags for [`TlsInteractionExt::request_certificate()`][crate::prelude::TlsInteractionExt::request_certificate()], [`TlsInteractionExt::request_certificate_async()`][crate::prelude::TlsInteractionExt::request_certificate_async()], and [`TlsInteractionExt::invoke_request_certificate()`][crate::prelude::TlsInteractionExt::invoke_request_certificate()]."],["TlsChannelBindingType","The type of TLS channel binding data to retrieve from [`TlsConnection`][crate::TlsConnection] or `GDtlsConnection`, as documented by RFC 5929. The `tls-unique-for-telnet` binding type is not currently implemented."],["TlsDatabaseLookupFlags","Flags for [`TlsDatabaseExt::lookup_certificate_for_handle()`][crate::prelude::TlsDatabaseExt::lookup_certificate_for_handle()], [`TlsDatabaseExt::lookup_certificate_issuer()`][crate::prelude::TlsDatabaseExt::lookup_certificate_issuer()], and [`TlsDatabaseExt::lookup_certificates_issued_by()`][crate::prelude::TlsDatabaseExt::lookup_certificates_issued_by()]."],["TlsInteractionResult","[`TlsInteractionResult`][crate::TlsInteractionResult] is returned by various functions in [`TlsInteraction`][crate::TlsInteraction] when finishing an interaction request."],["TlsRehandshakeMode","When to allow rehandshaking. See [`TlsConnectionExt::set_rehandshake_mode()`][crate::prelude::TlsConnectionExt::set_rehandshake_mode()]."],["UnixSocketAddressType","The type of name used by a [`UnixSocketAddress`][crate::UnixSocketAddress]. [`Path`][Self::Path] indicates a traditional unix domain socket bound to a filesystem path. [`Anonymous`][Self::Anonymous] indicates a socket not bound to any name (eg, a client-side socket, or a socket created with `socketpair()`)."],["ZlibCompressorFormat","Used to select the type of data format to use for [`ZlibDecompressor`][crate::ZlibDecompressor] and [`ZlibCompressor`][crate::ZlibCompressor]."]],"fn":[["bus_get","Asynchronously connects to the message bus specified by `bus_type`."],["bus_get_future",""],["bus_get_sync","Synchronously connects to the message bus specified by `bus_type`. Note that the returned object may shared with other callers, e.g. if two separate parts of a process calls this function with the same `bus_type`, they will share the same object."],["bus_own_name","Starts acquiring `name` on the bus specified by `bus_type` and calls `name_acquired_handler` and `name_lost_handler` when the name is acquired respectively lost. Callbacks will be invoked in the [thread-default main context][g-main-context-push-thread-default] of the thread you are calling this function from."],["bus_own_name_on_connection","Like `g_bus_own_name()` but takes a [`DBusConnection`][crate::DBusConnection] instead of a [`BusType`][crate::BusType]."],["bus_unown_name","Stops owning a name."],["bus_unwatch_name","Stops watching a name."],["bus_watch_name","Starts watching `name` on the bus specified by `bus_type` and calls `name_appeared_handler` and `name_vanished_handler` when the name is known to have an owner respectively known to lose its owner. Callbacks will be invoked in the [thread-default main context][g-main-context-push-thread-default] of the thread you are calling this function from."],["bus_watch_name_on_connection","Like `g_bus_watch_name()` but takes a [`DBusConnection`][crate::DBusConnection] instead of a [`BusType`][crate::BusType]."],["compile_resources","Call from build script to run `glib-compile-resources` to generate compiled gresources to embed in binary with [resources_register_include]. `target` is relative to `OUT_DIR`."],["content_type_can_be_executable","Checks if a content type can be executable. Note that for instance things like text files can be executables (i.e. scripts and batch files)."],["content_type_equals","Compares two content types for equality."],["content_type_from_mime_type","Tries to find a content type based on the mime type name."],["content_type_get_description","Gets the human readable description of the content type."],["content_type_get_generic_icon_name","Gets the generic icon name for a content type."],["content_type_get_icon","Gets the icon for a content type."],["content_type_get_mime_dirs","Get the list of directories which MIME data is loaded from. See [`content_type_set_mime_dirs()`][crate::content_type_set_mime_dirs()] for details."],["content_type_get_mime_type","Gets the mime type for the content type, if one is registered."],["content_type_get_symbolic_icon","Gets the symbolic icon for a content type."],["content_type_guess","Guesses the content type based on example data. If the function is uncertain, `result_uncertain` will be set to [`true`]. Either `filename` or `data` may be [`None`], in which case the guess will be based solely on the other argument."],["content_type_guess_for_tree","Tries to guess the type of the tree with root `root`, by looking at the files it contains. The result is an array of content types, with the best guess coming first."],["content_type_is_a","Determines if `type_` is a subset of `supertype`."],["content_type_is_mime_type","Determines if `type_` is a subset of `mime_type`. Convenience wrapper around [`content_type_is_a()`][crate::content_type_is_a()]."],["content_type_is_unknown","Checks if the content type is the generic “unknown” type. On UNIX this is the “application/octet-stream” mimetype, while on win32 it is “*” and on OSX it is a dynamic type or octet-stream."],["content_type_set_mime_dirs","Set the list of directories used by GIO to load the MIME database. If `dirs` is [`None`], the directories used are the default:"],["content_types_get_registered","Gets a list of strings containing all the registered content types known to the system. The list and its data should be freed using `g_list_free_full (list, g_free)`."],["dbus_address_escape_value","Escape `string` so it can appear in a D-Bus address as the value part of a key-value pair."],["dbus_address_get_for_bus_sync","Synchronously looks up the D-Bus address for the well-known message bus instance specified by `bus_type`. This may involve using various platform specific mechanisms."],["dbus_address_get_stream","Asynchronously connects to an endpoint specified by `address` and sets up the connection so it is in a state to run the client-side of the D-Bus authentication conversation. `address` must be in the D-Bus address format."],["dbus_address_get_stream_future",""],["dbus_address_get_stream_sync","Synchronously connects to an endpoint specified by `address` and sets up the connection so it is in a state to run the client-side of the D-Bus authentication conversation. `address` must be in the D-Bus address format."],["dbus_generate_guid","Generate a D-Bus GUID that can be used with e.g. [`DBusConnection::new()`][crate::DBusConnection::new()]."],["dbus_gvalue_to_gvariant","Converts a [`glib::Value`][crate::glib::Value] to a [`glib::Variant`][crate::glib::Variant] of the type indicated by the `type_` parameter."],["dbus_gvariant_to_gvalue","Converts a [`glib::Variant`][crate::glib::Variant] to a [`glib::Value`][crate::glib::Value]. If `value` is floating, it is consumed."],["dbus_is_address","Checks if `string` is a D-Bus address."],["dbus_is_guid","Checks if `string` is a D-Bus GUID."],["dbus_is_interface_name","Checks if `string` is a valid D-Bus interface name."],["dbus_is_member_name","Checks if `string` is a valid D-Bus member (e.g. signal or method) name."],["dbus_is_name","Checks if `string` is a valid D-Bus bus name (either unique or well-known)."],["dbus_is_supported_address","Like [`dbus_is_address()`][crate::dbus_is_address()] but also checks if the library supports the transports in `string` and that key/value pairs for each transport are valid. See the specification of the D-Bus address format."],["dbus_is_unique_name","Checks if `string` is a valid D-Bus unique bus name."],["io_error_from_errno","Converts errno.h error codes into GIO error codes. The fallback value [`IOErrorEnum::Failed`][crate::IOErrorEnum::Failed] is returned for error codes not currently handled (but note that future GLib releases may return a more specific value instead)."],["io_modules_scan_all_in_directory","Scans all the modules in the specified directory, ensuring that any extension point implemented by a module is registered."],["io_scheduler_cancel_all_jobs","Cancels all cancellable I/O jobs."],["keyfile_settings_backend_new","Creates a keyfile-backed [`SettingsBackend`][crate::SettingsBackend]."],["memory_settings_backend_new","Creates a memory-backed [`SettingsBackend`][crate::SettingsBackend]."],["networking_init","Initializes the platform networking libraries (eg, on Windows, this calls WSAStartup()). GLib will call this itself if it is needed, so you only need to call it if you directly call system networking functions (without calling any GLib networking functions first)."],["null_settings_backend_new","Creates a readonly [`SettingsBackend`][crate::SettingsBackend]."],["resources_enumerate_children","Returns all the names of children at the specified `path` in the set of globally registered resources. The return result is a [`None`] terminated list of strings which should be released with `g_strfreev()`."],["resources_get_info","Looks for a file at the specified `path` in the set of globally registered resources and if found returns information about it."],["resources_lookup_data","Looks for a file at the specified `path` in the set of globally registered resources and returns a [`glib::Bytes`][crate::glib::Bytes] that lets you directly access the data in memory."],["resources_open_stream","Looks for a file at the specified `path` in the set of globally registered resources and returns a [`InputStream`][crate::InputStream] that lets you read the data."],["resources_register","Registers the resource with the process-global set of resources. Once a resource is registered the files in it can be accessed with the global resource lookup functions like [`resources_lookup_data()`][crate::resources_lookup_data()]."],["resources_unregister","Unregisters the resource from the process-global set of resources."],["unix_is_mount_path_system_internal","Determines if `mount_path` is considered an implementation of the OS. This is primarily used for hiding mountable and mounted volumes that only are used in the OS and has little to no relevance to the casual user."],["unix_is_system_device_path","Determines if `device_path` is considered a block device path which is only used in implementation of the OS. This is primarily used for hiding mounted volumes that are intended as APIs for programs to read, and system administrators at a shell; rather than something that should, for example, appear in a GUI. For example, the Linux `/proc` filesystem."],["unix_is_system_fs_type","Determines if `fs_type` is considered a type of file system which is only used in implementation of the OS. This is primarily used for hiding mounted volumes that are intended as APIs for programs to read, and system administrators at a shell; rather than something that should, for example, appear in a GUI. For example, the Linux `/proc` filesystem."]],"macro":[["resources_register_include","Include gresources generated with [compile_resources] and register with glib. `path` is relative to `OUTDIR`."]],"mod":[["functions",""],["prelude","Traits and essential types intended for blanket imports."],["subclass",""],["task",""]],"static":[["DRIVE_IDENTIFIER_KIND_UNIX_DEVICE","The string used to obtain a Unix device path with [`DriveExt::identifier()`][crate::prelude::DriveExt::identifier()]."],["FILE_ATTRIBUTE_ACCESS_CAN_DELETE","A key in the “access” namespace for checking deletion privileges. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Boolean`][crate::FileAttributeType::Boolean]. This attribute will be [`true`] if the user is able to delete the file."],["FILE_ATTRIBUTE_ACCESS_CAN_EXECUTE","A key in the “access” namespace for getting execution privileges. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Boolean`][crate::FileAttributeType::Boolean]. This attribute will be [`true`] if the user is able to execute the file."],["FILE_ATTRIBUTE_ACCESS_CAN_READ","A key in the “access” namespace for getting read privileges. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Boolean`][crate::FileAttributeType::Boolean]. This attribute will be [`true`] if the user is able to read the file."],["FILE_ATTRIBUTE_ACCESS_CAN_RENAME","A key in the “access” namespace for checking renaming privileges. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Boolean`][crate::FileAttributeType::Boolean]. This attribute will be [`true`] if the user is able to rename the file."],["FILE_ATTRIBUTE_ACCESS_CAN_TRASH","A key in the “access” namespace for checking trashing privileges. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Boolean`][crate::FileAttributeType::Boolean]. This attribute will be [`true`] if the user is able to move the file to the trash."],["FILE_ATTRIBUTE_ACCESS_CAN_WRITE","A key in the “access” namespace for getting write privileges. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Boolean`][crate::FileAttributeType::Boolean]. This attribute will be [`true`] if the user is able to write to the file."],["FILE_ATTRIBUTE_DOS_IS_ARCHIVE","A key in the “dos” namespace for checking if the file’s archive flag is set. This attribute is [`true`] if the archive flag is set. This attribute is only available for DOS file systems. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Boolean`][crate::FileAttributeType::Boolean]."],["FILE_ATTRIBUTE_DOS_IS_MOUNTPOINT","A key in the “dos” namespace for checking if the file is a NTFS mount point (a volume mount or a junction point). This attribute is [`true`] if file is a reparse point of type IO_REPARSE_TAG_MOUNT_POINT. This attribute is only available for DOS file systems. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Boolean`][crate::FileAttributeType::Boolean]."],["FILE_ATTRIBUTE_DOS_IS_SYSTEM","A key in the “dos” namespace for checking if the file’s backup flag is set. This attribute is [`true`] if the backup flag is set. This attribute is only available for DOS file systems. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Boolean`][crate::FileAttributeType::Boolean]."],["FILE_ATTRIBUTE_DOS_REPARSE_POINT_TAG","A key in the “dos” namespace for getting the file NTFS reparse tag. This value is 0 for files that are not reparse points. See the Reparse Tags page for possible reparse tag values. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Uint32`][crate::FileAttributeType::Uint32]."],["FILE_ATTRIBUTE_ETAG_VALUE","A key in the “etag” namespace for getting the value of the file’s entity tag. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::String`][crate::FileAttributeType::String]."],["FILE_ATTRIBUTE_FILESYSTEM_FREE","A key in the “filesystem” namespace for getting the number of bytes of free space left on the file system. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Uint64`][crate::FileAttributeType::Uint64]."],["FILE_ATTRIBUTE_FILESYSTEM_READONLY","A key in the “filesystem” namespace for checking if the file system is read only. Is set to [`true`] if the file system is read only. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Boolean`][crate::FileAttributeType::Boolean]."],["FILE_ATTRIBUTE_FILESYSTEM_REMOTE","A key in the “filesystem” namespace for checking if the file system is remote. Is set to [`true`] if the file system is remote. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Boolean`][crate::FileAttributeType::Boolean]."],["FILE_ATTRIBUTE_FILESYSTEM_SIZE","A key in the “filesystem” namespace for getting the total size (in bytes) of the file system, used in [`FileExt::query_filesystem_info()`][crate::prelude::FileExt::query_filesystem_info()]. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Uint64`][crate::FileAttributeType::Uint64]."],["FILE_ATTRIBUTE_FILESYSTEM_TYPE","A key in the “filesystem” namespace for getting the file system’s type. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::String`][crate::FileAttributeType::String]."],["FILE_ATTRIBUTE_FILESYSTEM_USED","A key in the “filesystem” namespace for getting the number of bytes of used on the file system. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Uint64`][crate::FileAttributeType::Uint64]."],["FILE_ATTRIBUTE_FILESYSTEM_USE_PREVIEW","A key in the “filesystem” namespace for hinting a file manager application whether it should preview (e.g. thumbnail) files on the file system. The value for this key contain a `GFilesystemPreviewType`."],["FILE_ATTRIBUTE_GVFS_BACKEND","A key in the “gvfs” namespace that gets the name of the current GVFS backend in use. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::String`][crate::FileAttributeType::String]."],["FILE_ATTRIBUTE_ID_FILE","A key in the “id” namespace for getting a file identifier. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::String`][crate::FileAttributeType::String]. An example use would be during listing files, to avoid recursive directory scanning."],["FILE_ATTRIBUTE_ID_FILESYSTEM","A key in the “id” namespace for getting the file system identifier. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::String`][crate::FileAttributeType::String]. An example use would be during drag and drop to see if the source and target are on the same filesystem (default to move) or not (default to copy)."],["FILE_ATTRIBUTE_MOUNTABLE_CAN_EJECT","A key in the “mountable” namespace for checking if a file (of type G_FILE_TYPE_MOUNTABLE) can be ejected. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Boolean`][crate::FileAttributeType::Boolean]."],["FILE_ATTRIBUTE_MOUNTABLE_CAN_MOUNT","A key in the “mountable” namespace for checking if a file (of type G_FILE_TYPE_MOUNTABLE) is mountable. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Boolean`][crate::FileAttributeType::Boolean]."],["FILE_ATTRIBUTE_MOUNTABLE_CAN_POLL","A key in the “mountable” namespace for checking if a file (of type G_FILE_TYPE_MOUNTABLE) can be polled. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Boolean`][crate::FileAttributeType::Boolean]."],["FILE_ATTRIBUTE_MOUNTABLE_CAN_START","A key in the “mountable” namespace for checking if a file (of type G_FILE_TYPE_MOUNTABLE) can be started. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Boolean`][crate::FileAttributeType::Boolean]."],["FILE_ATTRIBUTE_MOUNTABLE_CAN_START_DEGRADED","A key in the “mountable” namespace for checking if a file (of type G_FILE_TYPE_MOUNTABLE) can be started degraded. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Boolean`][crate::FileAttributeType::Boolean]."],["FILE_ATTRIBUTE_MOUNTABLE_CAN_STOP","A key in the “mountable” namespace for checking if a file (of type G_FILE_TYPE_MOUNTABLE) can be stopped. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Boolean`][crate::FileAttributeType::Boolean]."],["FILE_ATTRIBUTE_MOUNTABLE_CAN_UNMOUNT","A key in the “mountable” namespace for checking if a file (of type G_FILE_TYPE_MOUNTABLE) is unmountable. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Boolean`][crate::FileAttributeType::Boolean]."],["FILE_ATTRIBUTE_MOUNTABLE_HAL_UDI","A key in the “mountable” namespace for getting the HAL UDI for the mountable file. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::String`][crate::FileAttributeType::String]."],["FILE_ATTRIBUTE_MOUNTABLE_IS_MEDIA_CHECK_AUTOMATIC","A key in the “mountable” namespace for checking if a file (of type G_FILE_TYPE_MOUNTABLE) is automatically polled for media. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Boolean`][crate::FileAttributeType::Boolean]."],["FILE_ATTRIBUTE_MOUNTABLE_START_STOP_TYPE","A key in the “mountable” namespace for getting the [`DriveStartStopType`][crate::DriveStartStopType]. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Uint32`][crate::FileAttributeType::Uint32]."],["FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE","A key in the “mountable” namespace for getting the unix device. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Uint32`][crate::FileAttributeType::Uint32]."],["FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE_FILE","A key in the “mountable” namespace for getting the unix device file. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::String`][crate::FileAttributeType::String]."],["FILE_ATTRIBUTE_OWNER_GROUP","A key in the “owner” namespace for getting the file owner’s group. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::String`][crate::FileAttributeType::String]."],["FILE_ATTRIBUTE_OWNER_USER","A key in the “owner” namespace for getting the user name of the file’s owner. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::String`][crate::FileAttributeType::String]."],["FILE_ATTRIBUTE_OWNER_USER_REAL","A key in the “owner” namespace for getting the real name of the user that owns the file. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::String`][crate::FileAttributeType::String]."],["FILE_ATTRIBUTE_PREVIEW_ICON","A key in the “preview” namespace for getting a [`Icon`][crate::Icon] that can be used to get preview of the file. For example, it may be a low resolution thumbnail without metadata. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Object`][crate::FileAttributeType::Object]. The value for this key should contain a [`Icon`][crate::Icon]."],["FILE_ATTRIBUTE_RECENT_MODIFIED","A key in the “recent” namespace for getting time, when the metadata for the file in `recent:///` was last changed. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Int64`][crate::FileAttributeType::Int64]."],["FILE_ATTRIBUTE_SELINUX_CONTEXT","A key in the “selinux” namespace for getting the file’s SELinux context. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::String`][crate::FileAttributeType::String]. Note that this attribute is only available if GLib has been built with SELinux support."],["FILE_ATTRIBUTE_STANDARD_ALLOCATED_SIZE","A key in the “standard” namespace for getting the amount of disk space that is consumed by the file (in bytes). This will generally be larger than the file size (due to block size overhead) but can occasionally be smaller (for example, for sparse files). Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Uint64`][crate::FileAttributeType::Uint64]."],["FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE","A key in the “standard” namespace for getting the content type of the file. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::String`][crate::FileAttributeType::String]. The value for this key should contain a valid content type."],["FILE_ATTRIBUTE_STANDARD_COPY_NAME","A key in the “standard” namespace for getting the copy name of the file. The copy name is an optional version of the name. If available it’s always in UTF8, and corresponds directly to the original filename (only transcoded to UTF8). This is useful if you want to copy the file to another filesystem that might have a different encoding. If the filename is not a valid string in the encoding selected for the filesystem it is in then the copy name will not be set."],["FILE_ATTRIBUTE_STANDARD_DESCRIPTION","A key in the “standard” namespace for getting the description of the file. The description is a utf8 string that describes the file, generally containing the filename, but can also contain further information. Example descriptions could be “filename (on hostname)” for a remote file or “filename (in trash)” for a file in the trash. This is useful for instance as the window title when displaying a directory or for a bookmarks menu."],["FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME","A key in the “standard” namespace for getting the display name of the file. A display name is guaranteed to be in UTF-8 and can thus be displayed in the UI. It is guaranteed to be set on every file. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::String`][crate::FileAttributeType::String]."],["FILE_ATTRIBUTE_STANDARD_EDIT_NAME","A key in the “standard” namespace for edit name of the file. An edit name is similar to the display name, but it is meant to be used when you want to rename the file in the UI. The display name might contain information you don’t want in the new filename (such as “(invalid unicode)” if the filename was in an invalid encoding)."],["FILE_ATTRIBUTE_STANDARD_FAST_CONTENT_TYPE","A key in the “standard” namespace for getting the fast content type. The fast content type isn’t as reliable as the regular one, as it only uses the filename to guess it, but it is faster to calculate than the regular content type. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::String`][crate::FileAttributeType::String]."],["FILE_ATTRIBUTE_STANDARD_ICON","A key in the “standard” namespace for getting the icon for the file. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Object`][crate::FileAttributeType::Object]. The value for this key should contain a [`Icon`][crate::Icon]."],["FILE_ATTRIBUTE_STANDARD_IS_BACKUP","A key in the “standard” namespace for checking if a file is a backup file. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Boolean`][crate::FileAttributeType::Boolean]."],["FILE_ATTRIBUTE_STANDARD_IS_HIDDEN","A key in the “standard” namespace for checking if a file is hidden. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Boolean`][crate::FileAttributeType::Boolean]."],["FILE_ATTRIBUTE_STANDARD_IS_SYMLINK","A key in the “standard” namespace for checking if the file is a symlink. Typically the actual type is something else, if we followed the symlink to get the type. On Windows NTFS mountpoints are considered to be symlinks as well. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Boolean`][crate::FileAttributeType::Boolean]."],["FILE_ATTRIBUTE_STANDARD_IS_VIRTUAL","A key in the “standard” namespace for checking if a file is virtual. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Boolean`][crate::FileAttributeType::Boolean]."],["FILE_ATTRIBUTE_STANDARD_IS_VOLATILE","A key in the “standard” namespace for checking if a file is volatile. This is meant for opaque, non-POSIX-like backends to indicate that the URI is not persistent. Applications should look at [`FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET`][crate::FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET] for the persistent URI."],["FILE_ATTRIBUTE_STANDARD_NAME","A key in the “standard” namespace for getting the name of the file. The name is the on-disk filename which may not be in any known encoding, and can thus not be generally displayed as is. It is guaranteed to be set on every file. Use [`FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME`][crate::FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME] if you need to display the name in a user interface. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::ByteString`][crate::FileAttributeType::ByteString]."],["FILE_ATTRIBUTE_STANDARD_SIZE","A key in the “standard” namespace for getting the file’s size (in bytes). Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Uint64`][crate::FileAttributeType::Uint64]."],["FILE_ATTRIBUTE_STANDARD_SORT_ORDER","A key in the “standard” namespace for setting the sort order of a file. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Int32`][crate::FileAttributeType::Int32]. An example use would be in file managers, which would use this key to set the order files are displayed. Files with smaller sort order should be sorted first, and files without sort order as if sort order was zero."],["FILE_ATTRIBUTE_STANDARD_SYMBOLIC_ICON","A key in the “standard” namespace for getting the symbolic icon for the file. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Object`][crate::FileAttributeType::Object]. The value for this key should contain a [`Icon`][crate::Icon]."],["FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET","A key in the “standard” namespace for getting the symlink target, if the file is a symlink. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::ByteString`][crate::FileAttributeType::ByteString]."],["FILE_ATTRIBUTE_STANDARD_TARGET_URI","A key in the “standard” namespace for getting the target URI for the file, in the case of [`FileType::Shortcut`][crate::FileType::Shortcut] or [`FileType::Mountable`][crate::FileType::Mountable] files. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::String`][crate::FileAttributeType::String]."],["FILE_ATTRIBUTE_STANDARD_TYPE","A key in the “standard” namespace for storing file types. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Uint32`][crate::FileAttributeType::Uint32]. The value for this key should contain a [`FileType`][crate::FileType]."],["FILE_ATTRIBUTE_THUMBNAILING_FAILED","A key in the “thumbnail” namespace for checking if thumbnailing failed. This attribute is [`true`] if thumbnailing failed. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Boolean`][crate::FileAttributeType::Boolean]."],["FILE_ATTRIBUTE_THUMBNAIL_IS_VALID","A key in the “thumbnail” namespace for checking whether the thumbnail is outdated. This attribute is [`true`] if the thumbnail is up-to-date with the file it represents, and [`false`] if the file has been modified since the thumbnail was generated."],["FILE_ATTRIBUTE_THUMBNAIL_PATH","A key in the “thumbnail” namespace for getting the path to the thumbnail image. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::ByteString`][crate::FileAttributeType::ByteString]."],["FILE_ATTRIBUTE_TIME_ACCESS","A key in the “time” namespace for getting the time the file was last accessed. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Uint64`][crate::FileAttributeType::Uint64], and contains the time since the file was last accessed, in seconds since the UNIX epoch."],["FILE_ATTRIBUTE_TIME_ACCESS_USEC","A key in the “time” namespace for getting the microseconds of the time the file was last accessed. This should be used in conjunction with [`FILE_ATTRIBUTE_TIME_ACCESS`][crate::FILE_ATTRIBUTE_TIME_ACCESS]. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Uint32`][crate::FileAttributeType::Uint32]."],["FILE_ATTRIBUTE_TIME_CHANGED","A key in the “time” namespace for getting the time the file was last changed. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Uint64`][crate::FileAttributeType::Uint64], and contains the time since the file was last changed, in seconds since the UNIX epoch."],["FILE_ATTRIBUTE_TIME_CHANGED_USEC","A key in the “time” namespace for getting the microseconds of the time the file was last changed. This should be used in conjunction with [`FILE_ATTRIBUTE_TIME_CHANGED`][crate::FILE_ATTRIBUTE_TIME_CHANGED]. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Uint32`][crate::FileAttributeType::Uint32]."],["FILE_ATTRIBUTE_TIME_CREATED","A key in the “time” namespace for getting the time the file was created. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Uint64`][crate::FileAttributeType::Uint64], and contains the time since the file was created, in seconds since the UNIX epoch."],["FILE_ATTRIBUTE_TIME_CREATED_USEC","A key in the “time” namespace for getting the microseconds of the time the file was created. This should be used in conjunction with [`FILE_ATTRIBUTE_TIME_CREATED`][crate::FILE_ATTRIBUTE_TIME_CREATED]. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Uint32`][crate::FileAttributeType::Uint32]."],["FILE_ATTRIBUTE_TIME_MODIFIED","A key in the “time” namespace for getting the time the file was last modified. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Uint64`][crate::FileAttributeType::Uint64], and contains the time since the file was modified, in seconds since the UNIX epoch."],["FILE_ATTRIBUTE_TIME_MODIFIED_USEC","A key in the “time” namespace for getting the microseconds of the time the file was last modified. This should be used in conjunction with [`FILE_ATTRIBUTE_TIME_MODIFIED`][crate::FILE_ATTRIBUTE_TIME_MODIFIED]. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Uint32`][crate::FileAttributeType::Uint32]."],["FILE_ATTRIBUTE_TRASH_DELETION_DATE","A key in the “trash” namespace. When requested against items in `trash:///`, will return the date and time when the file was trashed. The format of the returned string is YYYY-MM-DDThh:mm:ss. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::String`][crate::FileAttributeType::String]."],["FILE_ATTRIBUTE_TRASH_ITEM_COUNT","A key in the “trash” namespace. When requested against `trash:///` returns the number of (toplevel) items in the trash folder. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Uint32`][crate::FileAttributeType::Uint32]."],["FILE_ATTRIBUTE_TRASH_ORIG_PATH","A key in the “trash” namespace. When requested against items in `trash:///`, will return the original path to the file before it was trashed. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::ByteString`][crate::FileAttributeType::ByteString]."],["FILE_ATTRIBUTE_UNIX_BLOCKS","A key in the “unix” namespace for getting the number of blocks allocated for the file. This attribute is only available for UNIX file systems. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Uint64`][crate::FileAttributeType::Uint64]."],["FILE_ATTRIBUTE_UNIX_BLOCK_SIZE","A key in the “unix” namespace for getting the block size for the file system. This attribute is only available for UNIX file systems. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Uint32`][crate::FileAttributeType::Uint32]."],["FILE_ATTRIBUTE_UNIX_DEVICE","A key in the “unix” namespace for getting the device id of the device the file is located on (see `stat()` documentation). This attribute is only available for UNIX file systems. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Uint32`][crate::FileAttributeType::Uint32]."],["FILE_ATTRIBUTE_UNIX_GID","A key in the “unix” namespace for getting the group ID for the file. This attribute is only available for UNIX file systems. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Uint32`][crate::FileAttributeType::Uint32]."],["FILE_ATTRIBUTE_UNIX_INODE","A key in the “unix” namespace for getting the inode of the file. This attribute is only available for UNIX file systems. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Uint64`][crate::FileAttributeType::Uint64]."],["FILE_ATTRIBUTE_UNIX_IS_MOUNTPOINT","A key in the “unix” namespace for checking if the file represents a UNIX mount point. This attribute is [`true`] if the file is a UNIX mount point. Since 2.58, `/` is considered to be a mount point. This attribute is only available for UNIX file systems. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Boolean`][crate::FileAttributeType::Boolean]."],["FILE_ATTRIBUTE_UNIX_MODE","A key in the “unix” namespace for getting the mode of the file (e.g. whether the file is a regular file, symlink, etc). See the documentation for `lstat()`: this attribute is equivalent to the `st_mode` member of `struct stat`, and includes both the file type and permissions. This attribute is only available for UNIX file systems. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Uint32`][crate::FileAttributeType::Uint32]."],["FILE_ATTRIBUTE_UNIX_NLINK","A key in the “unix” namespace for getting the number of hard links for a file. See `lstat()` documentation. This attribute is only available for UNIX file systems. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Uint32`][crate::FileAttributeType::Uint32]."],["FILE_ATTRIBUTE_UNIX_RDEV","A key in the “unix” namespace for getting the device ID for the file (if it is a special file). See `lstat()` documentation. This attribute is only available for UNIX file systems. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Uint32`][crate::FileAttributeType::Uint32]."],["FILE_ATTRIBUTE_UNIX_UID","A key in the “unix” namespace for getting the user ID for the file. This attribute is only available for UNIX file systems. Corresponding [`FileAttributeType`][crate::FileAttributeType] is [`FileAttributeType::Uint32`][crate::FileAttributeType::Uint32]."],["MEMORY_MONITOR_EXTENSION_POINT_NAME","Extension point for memory usage monitoring functionality. See [Extending GIO][extending-gio]."],["MENU_ATTRIBUTE_ACTION","The menu item attribute which holds the action name of the item. Action names are namespaced with an identifier for the action group in which the action resides. For example, “win.” for window-specific actions and “app.” for application-wide actions."],["MENU_ATTRIBUTE_ACTION_NAMESPACE","The menu item attribute that holds the namespace for all action names in menus that are linked from this item."],["MENU_ATTRIBUTE_ICON","The menu item attribute which holds the icon of the item."],["MENU_ATTRIBUTE_LABEL","The menu item attribute which holds the label of the item."],["MENU_ATTRIBUTE_TARGET","The menu item attribute which holds the target with which the item’s action will be activated."],["MENU_LINK_SECTION","The name of the link that associates a menu item with a section. The linked menu will usually be shown in place of the menu item, using the item’s label as a header."],["MENU_LINK_SUBMENU","The name of the link that associates a menu item with a submenu."],["NATIVE_VOLUME_MONITOR_EXTENSION_POINT_NAME",""],["NETWORK_MONITOR_EXTENSION_POINT_NAME","Extension point for network status monitoring functionality. See [Extending GIO][extending-gio]."],["PROXY_EXTENSION_POINT_NAME","Extension point for proxy functionality. See [Extending GIO][extending-gio]."],["PROXY_RESOLVER_EXTENSION_POINT_NAME","Extension point for proxy resolving functionality. See [Extending GIO][extending-gio]."],["SETTINGS_BACKEND_EXTENSION_POINT_NAME","Extension point for [`SettingsBackend`][crate::SettingsBackend] functionality."],["TLS_BACKEND_EXTENSION_POINT_NAME","Extension point for TLS functionality via [`TlsBackend`][crate::TlsBackend]. See [Extending GIO][extending-gio]."],["TLS_DATABASE_PURPOSE_AUTHENTICATE_CLIENT","The purpose used to verify the client certificate in a TLS connection. Used by TLS servers."],["TLS_DATABASE_PURPOSE_AUTHENTICATE_SERVER","The purpose used to verify the server certificate in a TLS connection. This is the most common purpose in use. Used by TLS clients."],["VFS_EXTENSION_POINT_NAME","Extension point for [`Vfs`][crate::Vfs] functionality. See [Extending GIO][extending-gio]."],["VOLUME_IDENTIFIER_KIND_CLASS","The string used to obtain the volume class with [`VolumeExt::identifier()`][crate::prelude::VolumeExt::identifier()]."],["VOLUME_IDENTIFIER_KIND_HAL_UDI","The string used to obtain a Hal UDI with [`VolumeExt::identifier()`][crate::prelude::VolumeExt::identifier()]."],["VOLUME_IDENTIFIER_KIND_LABEL","The string used to obtain a filesystem label with [`VolumeExt::identifier()`][crate::prelude::VolumeExt::identifier()]."],["VOLUME_IDENTIFIER_KIND_NFS_MOUNT","The string used to obtain a NFS mount with [`VolumeExt::identifier()`][crate::prelude::VolumeExt::identifier()]."],["VOLUME_IDENTIFIER_KIND_UNIX_DEVICE","The string used to obtain a Unix device path with [`VolumeExt::identifier()`][crate::prelude::VolumeExt::identifier()]."],["VOLUME_IDENTIFIER_KIND_UUID","The string used to obtain a UUID with [`VolumeExt::identifier()`][crate::prelude::VolumeExt::identifier()]."],["VOLUME_MONITOR_EXTENSION_POINT_NAME","Extension point for volume monitor functionality. See [Extending GIO][extending-gio]."]],"struct":[["Action","[`Action`][crate::Action] represents a single named action."],["ActionGroup","[`ActionGroup`][crate::ActionGroup] represents a group of actions. Actions can be used to expose functionality in a structured way, either from one part of a program to another, or to the outside world. Action groups are often used together with a [`MenuModel`][crate::MenuModel] that provides additional representation data for displaying the actions to the user, e.g. in a menu."],["ActionGroupExportId",""],["ActionMap","The GActionMap interface is implemented by [`ActionGroup`][crate::ActionGroup] implementations that operate by containing a number of named [`Action`][crate::Action] instances, such as [`SimpleActionGroup`][crate::SimpleActionGroup]."],["AppInfo","[`AppInfo`][crate::AppInfo] and [`AppLaunchContext`][crate::AppLaunchContext] are used for describing and launching applications installed on the system."],["AppInfoCreateFlags","Flags used when creating a [`AppInfo`][crate::AppInfo]."],["AppInfoMonitor","[`AppInfoMonitor`][crate::AppInfoMonitor] is a very simple object used for monitoring the app info database for changes (ie: newly installed or removed applications)."],["AppLaunchContext","Integrating the launch with the launching application. This is used to handle for instance startup notification and launching the new application on the same screen as the launching window."],["Application","A [`Application`][crate::Application] is the foundation of an application. It wraps some low-level platform-specific services and is intended to act as the foundation for higher-level application classes such as `GtkApplication` or `MxApplication`. In general, you should not use this class outside of a higher level framework."],["ApplicationBuilder","A builder-pattern type to construct [`Application`] objects."],["ApplicationCommandLine","[`ApplicationCommandLine`][crate::ApplicationCommandLine] represents a command-line invocation of an application. It is created by [`Application`][crate::Application] and emitted in the `signal::Application::command-line` signal and virtual function."],["ApplicationFlags","Flags used to define the behaviour of a [`Application`][crate::Application]."],["AskPasswordFlags","[`AskPasswordFlags`][crate::AskPasswordFlags] are used to request specific information from the user, or to notify the user of their choices in an authentication situation."],["AsyncResult","Provides a base class for implementing asynchronous function results."],["BindingBuilder",""],["BufferedInputStream","Buffered input stream implements [`FilterInputStream`][crate::FilterInputStream] and provides for buffered reads."],["BufferedInputStreamBuilder","A builder-pattern type to construct [`BufferedInputStream`] objects."],["BufferedOutputStream","Buffered output stream implements [`FilterOutputStream`][crate::FilterOutputStream] and provides for buffered writes."],["BufferedOutputStreamBuilder","A builder-pattern type to construct [`BufferedOutputStream`] objects."],["BusNameOwnerFlags","Flags used in `g_bus_own_name()`."],["BusNameWatcherFlags","Flags used in `g_bus_watch_name()`."],["BytesIcon","[`BytesIcon`][crate::BytesIcon] specifies an image held in memory in a common format (usually png) to be used as icon."],["Cancellable","GCancellable is a thread-safe operation cancellation stack used throughout GIO to allow for cancellation of synchronous and asynchronous operations."],["CharsetConverter","[`CharsetConverter`][crate::CharsetConverter] is an implementation of [`Converter`][crate::Converter] based on GIConv."],["CharsetConverterBuilder","A builder-pattern type to construct [`CharsetConverter`] objects."],["Converter","[`Converter`][crate::Converter] is implemented by objects that convert binary data in various ways. The conversion can be stateful and may fail at any place."],["ConverterFlags","Flags used when calling a [`ConverterExtManual::convert()`][crate::prelude::ConverterExtManual::convert()]."],["ConverterInputStream","Converter input stream implements [`InputStream`][crate::InputStream] and allows conversion of data of various types during reading."],["ConverterInputStreamBuilder","A builder-pattern type to construct [`ConverterInputStream`] objects."],["ConverterOutputStream","Converter output stream implements [`OutputStream`][crate::OutputStream] and allows conversion of data of various types during reading."],["ConverterOutputStreamBuilder","A builder-pattern type to construct [`ConverterOutputStream`] objects."],["Credentials","The [`Credentials`][crate::Credentials] type is a reference-counted wrapper for native credentials. This information is typically used for identifying, authenticating and authorizing other processes."],["DBusActionGroup","[`DBusActionGroup`][crate::DBusActionGroup] is an implementation of the [`ActionGroup`][crate::ActionGroup] interface that can be used as a proxy for an action group that is exported over D-Bus with [`DBusConnection::export_action_group()`][crate::DBusConnection::export_action_group()]."],["DBusArgInfo","Information about an argument for a method or a signal."],["DBusAuthObserver","The [`DBusAuthObserver`][crate::DBusAuthObserver] type provides a mechanism for participating in how a [`DBusServer`][crate::DBusServer] (or a [`DBusConnection`][crate::DBusConnection]) authenticates remote peers. Simply instantiate a [`DBusAuthObserver`][crate::DBusAuthObserver] and connect to the signals you are interested in. Note that new signals may be added in the future"],["DBusCallFlags","Flags used in [`DBusConnection::call()`][crate::DBusConnection::call()] and similar APIs."],["DBusCapabilityFlags","Capabilities negotiated with the remote peer."],["DBusConnection","The [`DBusConnection`][crate::DBusConnection] type is used for D-Bus connections to remote peers such as a message buses. It is a low-level API that offers a lot of flexibility. For instance, it lets you establish a connection over any transport that can by represented as a [`IOStream`][crate::IOStream]."],["DBusConnectionFlags","Flags used when creating a new [`DBusConnection`][crate::DBusConnection]."],["DBusInterface","The [`DBusInterface`][crate::DBusInterface] type is the base type for D-Bus interfaces both on the service side (see [`DBusInterfaceSkeleton`][crate::DBusInterfaceSkeleton]) and client side (see [`DBusProxy`][crate::DBusProxy])."],["DBusInterfaceInfo","Information about a D-Bus interface."],["DBusInterfaceSkeleton","Abstract base class for D-Bus interfaces on the service side."],["DBusInterfaceSkeletonFlags","Flags describing the behavior of a [`DBusInterfaceSkeleton`][crate::DBusInterfaceSkeleton] instance."],["DBusMenuModel","[`DBusMenuModel`][crate::DBusMenuModel] is an implementation of [`MenuModel`][crate::MenuModel] that can be used as a proxy for a menu model that is exported over D-Bus with [`DBusConnection::export_menu_model()`][crate::DBusConnection::export_menu_model()]."],["DBusMessage","A type for representing D-Bus messages that can be sent or received on a [`DBusConnection`][crate::DBusConnection]."],["DBusMessageFlags","Message flags used in [`DBusMessage`][crate::DBusMessage]."],["DBusMethodInfo","Information about a method on an D-Bus interface."],["DBusMethodInvocation","Instances of the [`DBusMethodInvocation`][crate::DBusMethodInvocation] class are used when handling D-Bus method calls. It provides a way to asynchronously return results and errors."],["DBusNodeInfo","Information about nodes in a remote object hierarchy."],["DBusObject","The [`DBusObject`][crate::DBusObject] type is the base type for D-Bus objects on both the service side (see `GDBusObjectSkeleton`) and the client side (see `GDBusObjectProxy`). It is essentially just a container of interfaces."],["DBusPropertyInfo","Information about a D-Bus property on a D-Bus interface."],["DBusProxy","[`DBusProxy`][crate::DBusProxy] is a base class used for proxies to access a D-Bus interface on a remote object. A [`DBusProxy`][crate::DBusProxy] can be constructed for both well-known and unique names."],["DBusProxyFlags","Flags used when constructing an instance of a [`DBusProxy`][crate::DBusProxy] derived class."],["DBusSendMessageFlags","Flags used when sending `GDBusMessages` on a [`DBusConnection`][crate::DBusConnection]."],["DBusServer","[`DBusServer`][crate::DBusServer] is a helper for listening to and accepting D-Bus connections. This can be used to create a new D-Bus server, allowing two peers to use the D-Bus protocol for their own specialized communication. A server instance provided in this way will not perform message routing or implement the org.freedesktop.DBus interface."],["DBusServerFlags","Flags used when creating a [`DBusServer`][crate::DBusServer]."],["DBusSignalFlags","Flags used when subscribing to signals via [`DBusConnection::signal_subscribe()`][crate::DBusConnection::signal_subscribe()]."],["DBusSignalInfo","Information about a signal on a D-Bus interface."],["DataInputStream","Data input stream implements [`InputStream`][crate::InputStream] and includes functions for reading structured data directly from a binary input stream."],["DataInputStreamBuilder","A builder-pattern type to construct [`DataInputStream`] objects."],["DataOutputStream","Data output stream implements [`OutputStream`][crate::OutputStream] and includes functions for writing data directly to an output stream."],["DataOutputStreamBuilder","A builder-pattern type to construct [`DataOutputStream`] objects."],["DesktopAppInfo","[`DesktopAppInfo`][crate::DesktopAppInfo] is an implementation of [`AppInfo`][crate::AppInfo] based on desktop files."],["Drive","[`Drive`][crate::Drive] - this represent a piece of hardware connected to the machine. It’s generally only created for removable hardware or hardware with removable media."],["DriveStartFlags","Flags used when starting a drive."],["Emblem","[`Emblem`][crate::Emblem] is an implementation of [`Icon`][crate::Icon] that supports having an emblem, which is an icon with additional properties. It can than be added to a [`EmblemedIcon`][crate::EmblemedIcon]."],["EmblemedIcon","[`EmblemedIcon`][crate::EmblemedIcon] is an implementation of [`Icon`][crate::Icon] that supports adding an emblem to an icon. Adding multiple emblems to an icon is ensured via [`EmblemedIconExt::add_emblem()`][crate::prelude::EmblemedIconExt::add_emblem()]."],["File","[`File`][crate::File] is a high level abstraction for manipulating files on a virtual file system. `GFiles` are lightweight, immutable objects that do no I/O upon creation. It is necessary to understand that [`File`][crate::File] objects do not represent files, merely an identifier for a file. All file content I/O is implemented as streaming operations (see [`InputStream`][crate::InputStream] and [`OutputStream`][crate::OutputStream])."],["FileAttributeMatcher","Determines if a string matches a file attribute."],["FileAttributematcherIter",""],["FileCopyFlags","Flags used when copying or moving files."],["FileCreateFlags","Flags used when an operation may create a file."],["FileEnumerator","[`FileEnumerator`][crate::FileEnumerator] allows you to operate on a set of `GFiles`, returning a [`FileInfo`][crate::FileInfo] structure for each file enumerated (e.g. [`FileExt::enumerate_children()`][crate::prelude::FileExt::enumerate_children()] will return a [`FileEnumerator`][crate::FileEnumerator] for each of the children within a directory)."],["FileIOStream","GFileIOStream provides io streams that both read and write to the same file handle."],["FileIcon","[`FileIcon`][crate::FileIcon] specifies an icon by pointing to an image file to be used as icon."],["FileInfo","Functionality for manipulating basic metadata for files. [`FileInfo`][crate::FileInfo] implements methods for getting information that all files should contain, and allows for manipulation of extended attributes."],["FileInputStream","GFileInputStream provides input streams that take their content from a file."],["FileMeasureFlags","Flags that can be used with [`FileExt::measure_disk_usage()`][crate::prelude::FileExt::measure_disk_usage()]."],["FileMonitor","Monitors a file or directory for changes."],["FileMonitorFlags","Flags used to set what a [`FileMonitor`][crate::FileMonitor] will watch for."],["FileOutputStream","GFileOutputStream provides output streams that write their content to a file."],["FileQueryInfoFlags","Flags used when querying a [`FileInfo`][crate::FileInfo]."],["FilenameCompleter","Completes partial file and directory names given a partial string by looking in the file system for clues. Can return a list of possible completion strings for widget implementations."],["FilterId",""],["FilterInputStream","Base class for input stream implementations that perform some kind of filtering operation on a base stream. Typical examples of filtering operations are character set conversion, compression and byte order flipping."],["FilterOutputStream","Base class for output stream implementations that perform some kind of filtering operation on a base stream. Typical examples of filtering operations are character set conversion, compression and byte order flipping."],["GioFuture",""],["GioFutureResult",""],["IOStream","GIOStream represents an object that has both read and write streams. Generally the two streams act as separate input and output streams, but they share some common resources and state. For instance, for seekable streams, both streams may use the same position."],["IOStreamAsyncReadWrite",""],["IOStreamSpliceFlags","GIOStreamSpliceFlags determine how streams should be spliced."],["Icon","[`Icon`][crate::Icon] is a very minimal interface for icons. It provides functions for checking the equality of two icons, hashing of icons and serializing an icon to and from strings."],["InetAddress","[`InetAddress`][crate::InetAddress] represents an IPv4 or IPv6 internet address. Use [`ResolverExt::lookup_by_name()`][crate::prelude::ResolverExt::lookup_by_name()] or [`ResolverExt::lookup_by_name_async()`][crate::prelude::ResolverExt::lookup_by_name_async()] to look up the [`InetAddress`][crate::InetAddress] for a hostname. Use [`ResolverExt::lookup_by_address()`][crate::prelude::ResolverExt::lookup_by_address()] or [`ResolverExt::lookup_by_address_async()`][crate::prelude::ResolverExt::lookup_by_address_async()] to look up the hostname for a [`InetAddress`][crate::InetAddress]."],["InetAddressMask","[`InetAddressMask`][crate::InetAddressMask] represents a range of IPv4 or IPv6 addresses described by a base address and a length indicating how many bits of the base address are relevant for matching purposes. These are often given in string form. Eg, “10.0.0.0/8”, or “fe80::/10”."],["InetSocketAddress","An IPv4 or IPv6 socket address; that is, the combination of a [`InetAddress`][crate::InetAddress] and a port number."],["InputStream","[`InputStream`][crate::InputStream] has functions to read from a stream ([`InputStreamExtManual::read()`][crate::prelude::InputStreamExtManual::read()]), to close a stream ([`InputStreamExt::close()`][crate::prelude::InputStreamExt::close()]) and to skip some content ([`InputStreamExt::skip()`][crate::prelude::InputStreamExt::skip()])."],["InputStreamAsyncBufRead",""],["InputStreamAsyncRead",""],["InputStreamRead",""],["ListModel","[`ListModel`][crate::ListModel] is an interface that represents a mutable list of `GObjects`. Its main intention is as a model for various widgets in user interfaces, such as list views, but it can also be used as a convenient method of returning lists of data, with support for updates."],["ListStore","[`ListStore`][crate::ListStore] is a simple implementation of [`ListModel`][crate::ListModel] that stores all items in memory."],["ListStoreBuilder","A builder-pattern type to construct [`ListStore`] objects."],["LoadableIcon","Extends the [`Icon`][crate::Icon] interface and adds the ability to load icons from streams."],["MemoryInputStream","[`MemoryInputStream`][crate::MemoryInputStream] is a class for using arbitrary memory chunks as input for GIO streaming input operations."],["MemoryMonitor","[`MemoryMonitor`][crate::MemoryMonitor] will monitor system memory and suggest to the application when to free memory so as to leave more room for other applications. It is implemented on Linux using the Low Memory Monitor (API documentation)."],["MemoryOutputStream","[`MemoryOutputStream`][crate::MemoryOutputStream] is a class for using arbitrary memory chunks as output for GIO streaming output operations."],["Menu","[`Menu`][crate::Menu] is a simple implementation of [`MenuModel`][crate::MenuModel]. You populate a [`Menu`][crate::Menu] by adding [`MenuItem`][crate::MenuItem] instances to it."],["MenuAttributeIter","[`MenuAttributeIter`][crate::MenuAttributeIter] is an opaque structure type. You must access it using the functions below."],["MenuItem","[`MenuItem`][crate::MenuItem] is an opaque structure type. You must access it using the functions below."],["MenuLinkIter","[`MenuLinkIter`][crate::MenuLinkIter] is an opaque structure type. You must access it using the functions below."],["MenuModel","[`MenuModel`][crate::MenuModel] represents the contents of a menu – an ordered list of menu items. The items are associated with actions, which can be activated through them. Items can be grouped in sections, and may have submenus associated with them. Both items and sections usually have some representation data, such as labels or icons. The type of the associated action (ie whether it is stateful, and what kind of state it has) can influence the representation of the item."],["MenuModelExportId",""],["Mount","The [`Mount`][crate::Mount] interface represents user-visible mounts. Note, when porting from GnomeVFS, [`Mount`][crate::Mount] is the moral equivalent of `GnomeVFSVolume`."],["MountMountFlags","Flags used when mounting a mount."],["MountOperation","[`MountOperation`][crate::MountOperation] provides a mechanism for interacting with the user. It can be used for authenticating mountable operations, such as loop mounting files, hard drive partitions or server locations. It can also be used to ask the user questions or show a list of applications preventing unmount or eject operations from completing."],["MountUnmountFlags","Flags used when an unmounting a mount."],["NetworkAddress","[`NetworkAddress`][crate::NetworkAddress] provides an easy way to resolve a hostname and then attempt to connect to that host, handling the possibility of multiple IP addresses and multiple address families."],["NetworkMonitor","[`NetworkMonitor`][crate::NetworkMonitor] provides an easy-to-use cross-platform API for monitoring network connectivity. On Linux, the available implementations are based on the kernel’s netlink interface and on NetworkManager."],["NetworkService","Like [`NetworkAddress`][crate::NetworkAddress] does with hostnames, [`NetworkService`][crate::NetworkService] provides an easy way to resolve a SRV record, and then attempt to connect to one of the hosts that implements that service, handling service priority/weighting, multiple IP addresses, and multiple address families."],["Notification","[`Notification`][crate::Notification] is a mechanism for creating a notification to be shown to the user – typically as a pop-up notification presented by the desktop environment shell."],["OutputStream","[`OutputStream`][crate::OutputStream] has functions to write to a stream ([`OutputStreamExt::write()`][crate::prelude::OutputStreamExt::write()]), to close a stream ([`OutputStreamExt::close()`][crate::prelude::OutputStreamExt::close()]) and to flush pending writes ([`OutputStreamExt::flush()`][crate::prelude::OutputStreamExt::flush()])."],["OutputStreamAsyncWrite",""],["OutputStreamSpliceFlags","GOutputStreamSpliceFlags determine how streams should be spliced."],["OutputStreamWrite",""],["OwnerId",""],["Permission","A [`Permission`][crate::Permission] represents the status of the caller’s permission to perform a certain action."],["PollableInputStream","[`PollableInputStream`][crate::PollableInputStream] is implemented by `GInputStreams` that can be polled for readiness to read. This can be used when interfacing with a non-GIO API that expects UNIX-file-descriptor-style asynchronous I/O rather than GIO-style."],["PollableOutputStream","[`PollableOutputStream`][crate::PollableOutputStream] is implemented by `GOutputStreams` that can be polled for readiness to write. This can be used when interfacing with a non-GIO API that expects UNIX-file-descriptor-style asynchronous I/O rather than GIO-style."],["PropertyAction","A [`PropertyAction`][crate::PropertyAction] is a way to get a [`Action`][crate::Action] with a state value reflecting and controlling the value of a [`glib::Object`][crate::glib::Object] property."],["Proxy","A [`Proxy`][crate::Proxy] handles connecting to a remote host via a given type of proxy server. It is implemented by the ‘gio-proxy’ extension point. The extensions are named after their proxy protocol name. As an example, a SOCKS5 proxy implementation can be retrieved with the name ‘socks5’ using the function `g_io_extension_point_get_extension_by_name()`."],["ProxyAddress","Support for proxied [`InetSocketAddress`][crate::InetSocketAddress]."],["ProxyResolver","[`ProxyResolver`][crate::ProxyResolver] provides synchronous and asynchronous network proxy resolution. [`ProxyResolver`][crate::ProxyResolver] is used within [`SocketClient`][crate::SocketClient] through the method [`SocketConnectableExt::proxy_enumerate()`][crate::prelude::SocketConnectableExt::proxy_enumerate()]."],["ReadInputStream",""],["RegistrationId",""],["RemoteActionGroup","The GRemoteActionGroup interface is implemented by [`ActionGroup`][crate::ActionGroup] instances that either transmit action invocations to other processes or receive action invocations in the local process from other processes."],["Resolver","[`Resolver`][crate::Resolver] provides cancellable synchronous and asynchronous DNS resolution, for hostnames ([`ResolverExt::lookup_by_address()`][crate::prelude::ResolverExt::lookup_by_address()], [`ResolverExt::lookup_by_name()`][crate::prelude::ResolverExt::lookup_by_name()] and their async variants) and SRV (service) records ([`ResolverExt::lookup_service()`][crate::prelude::ResolverExt::lookup_service()])."],["ResolverNameLookupFlags","Flags to modify lookup behavior."],["Resource","Applications and libraries often contain binary or textual data that is really part of the application, rather than user data. For instance `GtkBuilder` .ui files, splashscreen images, GMenu markup XML, CSS files, icons, etc. These are often shipped as files in `$datadir/appname`, or manually included as literal strings in the code."],["ResourceLookupFlags","GResourceLookupFlags determine how resource path lookups are handled."],["Seekable","[`Seekable`][crate::Seekable] is implemented by streams (implementations of [`InputStream`][crate::InputStream] or [`OutputStream`][crate::OutputStream]) that support seeking."],["Settings","The [`Settings`][crate::Settings] class provides a convenient API for storing and retrieving application settings."],["SettingsBackend","The [`SettingsBackend`][crate::SettingsBackend] interface defines a generic interface for non-strictly-typed data that is stored in a hierarchy. To implement an alternative storage backend for [`Settings`][crate::Settings], you need to implement the [`SettingsBackend`][crate::SettingsBackend] interface and then make it implement the extension point [`SETTINGS_BACKEND_EXTENSION_POINT_NAME`][crate::SETTINGS_BACKEND_EXTENSION_POINT_NAME]."],["SettingsBindFlags","Flags used when creating a binding. These flags determine in which direction the binding works. The default is to synchronize in both directions."],["SettingsSchema","The [`SettingsSchemaSource`][crate::SettingsSchemaSource] and [`SettingsSchema`][crate::SettingsSchema] APIs provide a mechanism for advanced control over the loading of schemas and a mechanism for introspecting their content."],["SettingsSchemaKey","[`SettingsSchemaKey`][crate::SettingsSchemaKey] is an opaque data structure and can only be accessed using the following functions."],["SettingsSchemaSource","This is an opaque structure type. You may not access it directly."],["SignalSubscriptionId",""],["SimpleAction","A [`SimpleAction`][crate::SimpleAction] is the obvious simple implementation of the [`Action`][crate::Action] interface. This is the easiest way to create an action for purposes of adding it to a [`SimpleActionGroup`][crate::SimpleActionGroup]."],["SimpleActionGroup","[`SimpleActionGroup`][crate::SimpleActionGroup] is a hash table filled with [`Action`][crate::Action] objects, implementing the [`ActionGroup`][crate::ActionGroup] and [`ActionMap`][crate::ActionMap] interfaces."],["SimpleIOStream","GSimpleIOStream creates a [`IOStream`][crate::IOStream] from an arbitrary [`InputStream`][crate::InputStream] and [`OutputStream`][crate::OutputStream]. This allows any pair of input and output streams to be used with [`IOStream`][crate::IOStream] methods."],["SimplePermission","[`SimplePermission`][crate::SimplePermission] is a trivial implementation of [`Permission`][crate::Permission] that represents a permission that is either always or never allowed. The value is given at construction and doesn’t change."],["Socket","A [`Socket`][crate::Socket] is a low-level networking primitive. It is a more or less direct mapping of the BSD socket API in a portable GObject based API. It supports both the UNIX socket implementations and winsock2 on Windows."],["SocketAddress","[`SocketAddress`][crate::SocketAddress] is the equivalent of struct sockaddr in the BSD sockets API. This is an abstract class; use [`InetSocketAddress`][crate::InetSocketAddress] for internet sockets, or [`UnixSocketAddress`][crate::UnixSocketAddress] for UNIX domain sockets."],["SocketAddressEnumerator","[`SocketAddressEnumerator`][crate::SocketAddressEnumerator] is an enumerator type for [`SocketAddress`][crate::SocketAddress] instances. It is returned by enumeration functions such as [`SocketConnectableExt::enumerate()`][crate::prelude::SocketConnectableExt::enumerate()], which returns a [`SocketAddressEnumerator`][crate::SocketAddressEnumerator] to list each [`SocketAddress`][crate::SocketAddress] which could be used to connect to that [`SocketConnectable`][crate::SocketConnectable]."],["SocketClient","[`SocketClient`][crate::SocketClient] is a lightweight high-level utility class for connecting to a network host using a connection oriented socket type."],["SocketConnectable","Objects that describe one or more potential socket endpoints implement [`SocketConnectable`][crate::SocketConnectable]. Callers can then use [`SocketConnectableExt::enumerate()`][crate::prelude::SocketConnectableExt::enumerate()] to get a [`SocketAddressEnumerator`][crate::SocketAddressEnumerator] to try out each socket address in turn until one succeeds, as shown in the sample code below."],["SocketConnection","[`SocketConnection`][crate::SocketConnection] is a [`IOStream`][crate::IOStream] for a connected socket. They can be created either by [`SocketClient`][crate::SocketClient] when connecting to a host, or by [`SocketListener`][crate::SocketListener] when accepting a new client."],["SocketListener","A [`SocketListener`][crate::SocketListener] is an object that keeps track of a set of server sockets and helps you accept sockets from any of the socket, either sync or async."],["SocketService","A [`SocketService`][crate::SocketService] is an object that represents a service that is provided to the network or over local sockets. When a new connection is made to the service the `signal::SocketService::incoming` signal is emitted."],["SrvTarget","SRV (service) records are used by some network protocols to provide service-specific aliasing and load-balancing. For example, XMPP (Jabber) uses SRV records to locate the XMPP server for a domain; rather than connecting directly to “example.com” or assuming a specific server hostname like “xmpp.example.com”, an XMPP client would look up the “xmpp-client” SRV record for “example.com”, and then connect to whatever host was pointed to by that record."],["Subprocess","[`Subprocess`][crate::Subprocess] allows the creation of and interaction with child processes."],["SubprocessFlags","Flags to define the behaviour of a [`Subprocess`][crate::Subprocess]."],["SubprocessLauncher","This class contains a set of options for launching child processes, such as where its standard input and output will be directed, the argument list, the environment, and more."],["Task","A [`Task`][crate::Task] represents and manages a cancellable “task”."],["TcpConnection","This is the subclass of [`SocketConnection`][crate::SocketConnection] that is created for TCP/IP sockets."],["ThemedIcon","[`ThemedIcon`][crate::ThemedIcon] is an implementation of [`Icon`][crate::Icon] that supports icon themes. [`ThemedIcon`][crate::ThemedIcon] contains a list of all of the icons present in an icon theme, so that icons can be looked up quickly. [`ThemedIcon`][crate::ThemedIcon] does not provide actual pixmaps for icons, just the icon names. Ideally something like `gtk_icon_theme_choose_icon()` should be used to resolve the list of names so that fallback icons work nicely with themes that inherit other themes."],["ThreadedSocketService","A [`ThreadedSocketService`][crate::ThreadedSocketService] is a simple subclass of [`SocketService`][crate::SocketService] that handles incoming connections by creating a worker thread and dispatching the connection to it by emitting the `signal::ThreadedSocketService::run` signal in the new thread."],["TlsBackend","TLS (Transport Layer Security, aka SSL) and DTLS backend."],["TlsCertificate","A certificate used for TLS authentication and encryption. This can represent either a certificate only (eg, the certificate received by a client from a server), or the combination of a certificate and a private key (which is needed when acting as a [`TlsServerConnection`][crate::TlsServerConnection])."],["TlsCertificateFlags","A set of flags describing TLS certification validation. This can be used to set which validation steps to perform (eg, with [`TlsClientConnectionExt::set_validation_flags()`][crate::prelude::TlsClientConnectionExt::set_validation_flags()]), or to describe why a particular certificate was rejected (eg, in `signal::TlsConnection::accept-certificate`)."],["TlsClientConnection","[`TlsClientConnection`][crate::TlsClientConnection] is the client-side subclass of [`TlsConnection`][crate::TlsConnection], representing a client-side TLS connection."],["TlsConnection","[`TlsConnection`][crate::TlsConnection] is the base TLS connection class type, which wraps a [`IOStream`][crate::IOStream] and provides TLS encryption on top of it. Its subclasses, [`TlsClientConnection`][crate::TlsClientConnection] and [`TlsServerConnection`][crate::TlsServerConnection], implement client-side and server-side TLS, respectively."],["TlsDatabase","[`TlsDatabase`][crate::TlsDatabase] is used to look up certificates and other information from a certificate or key store. It is an abstract base class which TLS library specific subtypes override."],["TlsDatabaseVerifyFlags","Flags for [`TlsDatabaseExt::verify_chain()`][crate::prelude::TlsDatabaseExt::verify_chain()]."],["TlsFileDatabase","[`TlsFileDatabase`][crate::TlsFileDatabase] is implemented by [`TlsDatabase`][crate::TlsDatabase] objects which load their certificate information from a file. It is an interface which TLS library specific subtypes implement."],["TlsInteraction","[`TlsInteraction`][crate::TlsInteraction] provides a mechanism for the TLS connection and database code to interact with the user. It can be used to ask the user for passwords."],["TlsPassword","Holds a password used in TLS."],["TlsPasswordFlags","Various flags for the password."],["TlsServerConnection","[`TlsServerConnection`][crate::TlsServerConnection] is the server-side subclass of [`TlsConnection`][crate::TlsConnection], representing a server-side TLS connection."],["UnixFDList","A [`UnixFDList`][crate::UnixFDList] contains a list of file descriptors. It owns the file descriptors that it contains, closing them when finalized."],["UnixInputStream","[`UnixInputStream`][crate::UnixInputStream] implements [`InputStream`][crate::InputStream] for reading from a UNIX file descriptor, including asynchronous operations. (If the file descriptor refers to a socket or pipe, this will use `poll()` to do asynchronous I/O. If it refers to a regular file, it will fall back to doing asynchronous I/O in another thread.)"],["UnixMountEntry","Defines a Unix mount entry (e.g. `<filename>`/media/cdrom`</filename>`). This corresponds roughly to a mtab entry."],["UnixMountPoint","Defines a Unix mount point (e.g. `<filename>`/dev`</filename>`). This corresponds roughly to a fstab entry."],["UnixOutputStream","[`UnixOutputStream`][crate::UnixOutputStream] implements [`OutputStream`][crate::OutputStream] for writing to a UNIX file descriptor, including asynchronous operations. (If the file descriptor refers to a socket or pipe, this will use `poll()` to do asynchronous I/O. If it refers to a regular file, it will fall back to doing asynchronous I/O in another thread.)"],["UnixSocketAddress","Support for UNIX-domain (also known as local) sockets."],["Vfs","Entry point for using GIO functionality."],["Volume","The [`Volume`][crate::Volume] interface represents user-visible objects that can be mounted. Note, when porting from GnomeVFS, [`Volume`][crate::Volume] is the moral equivalent of `GnomeVFSDrive`."],["VolumeMonitor","[`VolumeMonitor`][crate::VolumeMonitor] is for listing the user interesting devices and volumes on the computer. In other words, what a file selector or file manager would show in a sidebar."],["WatcherId",""],["WriteOutputStream",""],["ZlibCompressor","Zlib decompression"],["ZlibDecompressor","Zlib decompression"]]});