(function() {var implementors = {};
implementors["cairo"] = [{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> for <a class=\"enum\" href=\"cairo/enum.Error.html\" title=\"enum cairo::Error\">Error</a>","synthetic":false,"types":["cairo::error::Error"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> for <a class=\"enum\" href=\"cairo/enum.IoError.html\" title=\"enum cairo::IoError\">IoError</a>","synthetic":false,"types":["cairo::error::IoError"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> for <a class=\"enum\" href=\"cairo/enum.BorrowError.html\" title=\"enum cairo::BorrowError\">BorrowError</a>","synthetic":false,"types":["cairo::error::BorrowError"]}];
implementors["gio"] = [{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> for <a class=\"enum\" href=\"gio/prelude/enum.InitableError.html\" title=\"enum gio::prelude::InitableError\">InitableError</a>","synthetic":false,"types":["gio::initable::InitableError"]}];
implementors["glib"] = [{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> for <a class=\"struct\" href=\"glib/error/struct.Error.html\" title=\"struct glib::error::Error\">Error</a>","synthetic":false,"types":["glib::error::Error"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> for <a class=\"struct\" href=\"glib/error/struct.BoolError.html\" title=\"struct glib::error::BoolError\">BoolError</a>","synthetic":false,"types":["glib::error::BoolError"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> for <a class=\"struct\" href=\"glib/translate/struct.GlibNoneError.html\" title=\"struct glib::translate::GlibNoneError\">GlibNoneError</a>","synthetic":false,"types":["glib::translate::GlibNoneError"]},{"text":"impl&lt;I:&nbsp;<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/error/trait.Error.html\" title=\"trait std::error::Error\">Error</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> for <a class=\"enum\" href=\"glib/translate/enum.GlibNoneOrInvalidError.html\" title=\"enum glib::translate::GlibNoneOrInvalidError\">GlibNoneOrInvalidError</a>&lt;I&gt;","synthetic":false,"types":["glib::translate::GlibNoneOrInvalidError"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> for <a class=\"struct\" href=\"glib/value/struct.ValueTypeMismatchError.html\" title=\"struct glib::value::ValueTypeMismatchError\">ValueTypeMismatchError</a>","synthetic":false,"types":["glib::value::ValueTypeMismatchError"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> for <a class=\"enum\" href=\"glib/value/enum.InvalidCharError.html\" title=\"enum glib::value::InvalidCharError\">InvalidCharError</a>","synthetic":false,"types":["glib::value::InvalidCharError"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> for <a class=\"enum\" href=\"glib/value/enum.ValueTypeMismatchOrNoneError.html\" title=\"enum glib::value::ValueTypeMismatchOrNoneError\">ValueTypeMismatchOrNoneError</a>","synthetic":false,"types":["glib::value::ValueTypeMismatchOrNoneError"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> for <a class=\"struct\" href=\"glib/variant/struct.VariantTypeMismatchError.html\" title=\"struct glib::variant::VariantTypeMismatchError\">VariantTypeMismatchError</a>","synthetic":false,"types":["glib::variant::VariantTypeMismatchError"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()